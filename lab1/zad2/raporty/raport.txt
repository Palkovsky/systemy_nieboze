Testu będziemy dokonowyać dla następującej ilości plików w:
      - 13 tysięcy (/usr/lib)
      - 25 tysięcy (/usr/src/)
      - 70 tysięcy (/usr/)


Dla każdej wielkości dokonujemy pomiaru czasu:
    - operacji wyszukiwania wszystkich plików \\* i zapisu do pliku tymczasowego
    - operacji przeniesienia z pliku tymczasowego do pamięcie
    - operacji zwolnienia bloku pamięci


Wyniki dla 13 tysięcy plików(/usr/lib/):

           Operation                  Real                 User               System
               START             0.000410s             0.000000s             0.000000s
    search_directory             0.033578s             0.010000s             0.010000s
         move_to_mem             0.002499s             0.000000s             0.000000s
        remove_block             0.000003s             0.000000s             0.000000s
             OVERALL             0.037550s             0.010000s             0.010000s

Cała procedura zajęła około 37 milisekund. Najwięcej czasu zostało spędzone w stanie search_directory, czyli na wykonywaniu polecenia 'find' i zapisywaniu pliku tymczasowego.

Czas rzeczywisty jest wyższy od czasów użytkownika i systemu z tego powodu, że program find przez większość czasu czeka na odczyt danych z dysku.

move_to_mem pokazuje 0 w trybie użytkownika i jądra dlatego, że ładowany plik był bardzo mały, więc procedura działa bardzo szybko.

Usuwanie polega jedynie na wywołaniu free() i przypisaniu jednemu wskaźnikowi wartości NULL. Niezależnie od wielkości zwalnianego bloku operacja ta będzie szybka.

Wyniki dla 25 tysięcy plików(/usr/src/):

           Operation                  Real                 User               System
               START             0.000388s             0.000000s             0.000000s
    search_directory             0.113951s             0.000000s             0.080000s
         move_to_mem             0.044881s             0.000000s             0.030000s
        remove_block             0.000103s             0.000000s             0.000000s
             OVERALL             0.160464s             0.000000s             0.110000s

Tutaj możemy zaobserwować wydłużenie czasu systemowego względem czasu użytkownika w fazie search_directory. Wynika to z tego, że polecenie find przez znaczną część swojego działania wykonuje operacje IO. Z tego powodu musi czekać.

Można też zeuważyć zwiększczenie czasu systemowego w fazie move_to_mem, wynika to z tego że wykonujemy operację czytania bajt po bajcie pliku tymczasowego.

Wyniki dla około 70 tysięcy plików(/usr/):

           Operation                  Real                 User               System
               START             0.000367s             0.000000s             0.000000s
    search_directory             0.229972s             0.000000s             0.180000s
         move_to_mem             0.096326s             0.000000s             0.060000s
        remove_block             0.000237s             0.000000s             0.000000s
             OVERALL             0.328086s             0.000000s             0.240000s

Dla sekwencji różnych operacji:

           Operation                  Real                 User               System
               START             0.000306s             0.000000s             0.000000s
    search_directory             0.004824s             0.000000s             0.000000s
         move_to_mem             0.000650s             0.000000s             0.000000s
    search_directory             0.143336s             0.050000s             0.080000s
         move_to_mem             0.000690s             0.000000s             0.000000s
    search_directory             0.154122s             0.060000s             0.090000s
        remove_block             0.000010s             0.000000s             0.000000s
         move_to_mem             0.001850s             0.000000s             0.000000s
    search_directory             0.026229s             0.010000s             0.010000s
        remove_block             0.000004s             0.000000s             0.000000s
        remove_block             0.000001s             0.000000s             0.000000s
    search_directory             0.150076s             0.050000s             0.090000s
         move_to_mem             0.000685s             0.000000s             0.000000s
             OVERALL             0.486549s             0.170000s             0.270000s

Dla sekwencji wielu operacji spostrzeżenia się utrzymują. Widać tutaj, że nie ładujemy zbyt dużych plików do pamięci dlatego czas systemowy i użytkownika w move_to_mem jest niski.

Można zauważyć że czas użytkownika dla niektórych przypadków wzrósł. Wynika to z zastosowania pewnych wyrażeń regularnych w argumecie find'a. Nie ma sensu żeby łańcuchy znaków były matchowane w trybie jądra.
