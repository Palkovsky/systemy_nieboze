Testu będziemy dokonowyać dla następującej ilości plików w:
      - 13 tysięcy (/usr/lib)
      - 25 tysięcy (/usr/src/)
      - 70 tysięcy (/usr/)

Dla każdej wielkości dokonujemy pomiaru czasu:
    - operacji wyszukiwania wszystkich plików \\* i zapisu do pliku tymczasowego
    - operacji przeniesienia z pliku tymczasowego do pamięcie
    - operacji zwolnienia bloku pamięci

Wyniki dla 13 tysięcy plików(/usr/lib/):

                                         Operation                  Real                 User               System
                                   create_table 10             0.000008s             0.000000s             0.000011s
        search_directory /usr/lib/ \*.so file.temp             0.129886s             0.000000s             0.068679s
                                       move_to_mem             0.002415s             0.000000s             0.001511s
                                    remove_block 0             0.000004s             0.000000s             0.000004s
                                             TOTAL             0.133309s             0.000000s             0.070299s

Cała procedura zajęła około 133 milisekund. Najwięcej czasu zostało spędzone w stanie search_directory, czyli na wykonywaniu polecenia 'find' i zapisywaniu pliku tymczasowego.

Czas rzeczywisty jest wyższy od czasów użytkownika i systemu z tego powodu, że program find przez większość czasu pozostaje bezczynny czekając na odczyt danych z dysku.

move_to_mem trwa około 1 milisekundę czas systemowego, a rzeczywistego około 2 milisekundy, wynika to z czekania na odczyt pliku(operacja IO).

Usuwanie polega jedynie na wywołaniu free() i przypisaniu jednemu wskaźnikowi wartości NULL. Niezależnie od wielkości zwalnianego bloku operacja ta będzie szybka i dla większych bloków będzie nieznacznie wzrastać.

Wyniki dla 25 tysięcy plików(/usr/src/):

                                         Operation                  Real                 User               System
                                   create_table 10             0.000004s             0.000000s             0.000007s
           search_directory /usr/src/ \* file.temp             0.686483s             0.035089s             0.317882s
                                       move_to_mem             0.050130s             0.007956s             0.029469s
                                    remove_block 0             0.000143s             0.000029s             0.000115s
                                             TOTAL             0.738031s             0.043082s             0.347563s


Można też zeuważyć zwiększczenie czasu systemowego i użytkownika w fazie move_to_mem, wynika to z tego że wykonujemy operację czytania bajt po bajcie pliku tymczasowego, który dla większej ilości plików znalezionych za pomocą find jest większy. Jak widać zwolnienie pamięci zajmuje 0.1 milisekundy.

Wyniki dla około 70 tysięcy plików(/usr/):

                                         Operation                  Real                 User               System
                                   create_table 10             0.000005s             0.000000s             0.000007s
               search_directory /usr/ \* file.temp             1.262104s             0.014382s             0.635435s
                                       move_to_mem             0.102143s             0.007006s             0.068671s
                                    remove_block 0             0.000223s             0.000020s             0.000202s
                                             TOTAL             1.366383s             0.021418s             0.704789s

Oczywiście obserwujemy wzrost czasu użytkownika/systemowego w fazie search_directory. Procedura move_to_mem spędziła znacznie więcej czasu w trybie jądra, ponieważ musiała odczytać większy plik(więcej operaci IO)

Czas spędzany w trybie użytkownika jest dość niski, aby upewnić się że dobrze go mierzę dodaję spinlocka przy obsłudzie procedury move_to_mem. Spodziewam się znacznego zwiększania czas użytkownika w tej fazie:
                                         Operation                  Real                 User               System
                                   create_table 10             0.000004s             0.000000s             0.000006s
               search_directory /usr/ \* file.temp             1.257711s             0.002490s             0.633049s
                                       move_to_mem            22.604051s            22.455875s             0.058666s
                                    remove_block 0             0.000178s             0.000177s             0.000001s
                                             TOTAL            23.863884s            22.458591s             0.692154s

Jak widać po dodaniu spinlocka czas spędzony w trybie użytkownika zwiększył się, co pokazuje że nasz sposób pomiaru jest prawidłowy.

Dla sekwencji różnych operacji:

                                         Operation                  Real                 User               System
                                   create_table 10             0.000004s             0.000000s             0.000006s
               search_directory /bin/ \* file.temp             0.007085s             0.000000s             0.003632s
                                       move_to_mem             0.000727s             0.000000s             0.000367s
             search_directory /usr dif\* file.temp             1.143908s             0.000000s             0.569227s
                                       move_to_mem             0.000712s             0.000000s             0.000318s
           search_directory /usr \*mac\* file.temp             0.154562s             0.047823s             0.096893s
                                    remove_block 0             0.000004s             0.000000s             0.000004s
                                       move_to_mem             0.001782s             0.000000s             0.001035s
           search_directory /usr/lib vim file.temp             0.025364s             0.007480s             0.016101s
                                    remove_block 0             0.000004s             0.000000s             0.000005s
                                    remove_block 1             0.000002s             0.000000s             0.000003s
               search_directory /usr vim file.temp             0.142218s             0.059784s             0.076844s
                                       move_to_mem             0.000744s             0.000000s             0.000322s
                                             TOTAL             1.480828s             0.115087s             0.765186s



Dla sekwencji wielu operacji spostrzeżenia się utrzymują. Widać tutaj, że nie ładujemy zbyt dużych plików do pamięci dlatego czas systemowy i użytkownika w move_to_mem jest niski.

Można zauważyć że czas użytkownika dla niektórych wyszukiwań przypadków wzrósł. Wynika to z zastosowania pewnych wyrażeń regularnych w argumecie find'a. Nie ma sensu żeby łańcuchy znaków były matchowane  w trybie jądra.
